package com.walking.intensive.chapter2.task6;

/**
 * Реализуйте представленные ниже методы для расчета
 * НОК (наименьшее общее кратное) и НОД (наибольший общий делитель).
 *
 * <p><a href="https://github.com/KFalcon2022/intensive-tasks-2024/blob/master/README.md">Требования к оформлению</a>
 */
public class Task6 {
    public static void main(String[] args) {
        System.out.println(getGcdByEuclideanAlgorithm(270, 192));
    }

    /**
     * Реализуйте метод, который будет возвращать НОК для чисел, переданных параметрами.
     *
     * <p>Входные параметры - положительные целые числа.
     *
     * <p>Если входные данные некорректны - метод должен возвращать -1.
     */
    static int getLcm(int m, int n) {

        if (n <= 0 || m <= 0) {
            return -1;
        }
        if (n >= m) {
            int plus = n;
            for (; ; ) {
                if (n % m == 0) {
                    return n;
                }
                n += plus;
            }
        }

        int plus = m;
        for (; ; ) {
            if (m % n == 0) {
                return m;
            }
            m += plus;
        }
    }


    /**
     * Реализуйте метод, который будет возвращать НОД для чисел, переданных параметрами.
     *
     * <p>Входные параметры - положительные целые числа.
     *
     * <p>Если входные данные некорректны - метод должен возвращать -1.
     */
    static int getGcd(int m, int n) {

        if (n <= 0 || m <= 0) {
            return -1;
        }
        // Находим наибольший делитель для меньшего из параметров (если первый параметр меньше второго)
        if (m <= n) {
            for (int i = m; i > 0; i--) {
                if (m % i == 0) {
                    // Пробуем разделить больший из параметров на делитель
                    if (n % i == 0) {
                        return i;
                    }
                }
            }
        }
        // Если первый параметр больше второго
        for (int i = n; i > 0; i--) {
            if (n % i == 0) {
                if (m % i == 0) {
                    return i;
                }
            }
        }
        return 0;
    }


    /**
     * Реализуйте метод, который будет возвращать НОД для чисел, переданных параметрами.
     * Расчет должен производиться с помощью алгоритма Евклида
     *
     * <p>Входные параметры - положительные целые числа.
     *
     * <p>Если входные данные некорректны - метод должен возвращать -1.
     */
    static int getGcdByEuclideanAlgorithm(int m, int n) {
        if (n <= 0 || m <= 0) {
            return -1;
        }

        for (; ; ) {
            if (m >= n) {
                int minus = n;
                m -= minus;
            } else {
                int minus = m;
                n -= minus;
            }
            if (n == 0) {
                return m;
            }
            if (m == 0) {
                return n;
            }
        }
    }
}



